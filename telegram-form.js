// Telegram Bot Configuration
// IMPORTANT: Replace these with your actual values
const TELEGRAM_BOT_TOKEN = '8348796407:AAH2ok1TXB-A66is-ua0v5ReejCUHaDVm0c'; // Format: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz
const TELEGRAM_CHAT_ID = '848857955'; // Format: 123456789 (your user ID)

// Debug mode - set to true to see console logs
const DEBUG_MODE = true;

// Form submission handler
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm');
    
    if (!form) {
        console.error('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        return;
    }
    
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (DEBUG_MODE) console.log('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...');
        
        // Configuration validation removed - using actual values
        
        // Get form data
        const formData = new FormData(this);
        const data = Object.fromEntries(formData);
        
        // Validate required fields
        if (!data.name || !data.email || !data.message) {
            showNotification('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        // Create formatted message
        const message = `
üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>

üë§ <b>–ò–º—è:</b> ${data.name}
üìß <b>Email:</b> ${data.email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üõ†Ô∏è <b>–¢–∏–ø —É—Å–ª—É–≥–∏:</b> ${getServiceName(data.service) || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${data.message}

üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
})}

üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–∞–π—Ç–∞
        `.trim();
        
        if (DEBUG_MODE) console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        // Show loading state
        setButtonLoading(true);
        
        try {
            const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
            if (DEBUG_MODE) console.log('URL –∑–∞–ø—Ä–æ—Å–∞:', url);
            
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: TELEGRAM_CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            });
            
            if (DEBUG_MODE) console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
            
            if (!response.ok) {
                throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            }
            
            const result = await response.json();
            if (DEBUG_MODE) console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
            
            if (result.ok) {
                showNotification('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
                this.reset();
            } else {
                throw new Error(result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
            showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`, 'error');
            
            // Additional debugging for common issues
            if (error.message.includes('Failed to fetch')) {
                showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ CORS –ø–æ–ª–∏—Ç–∏–∫—É.', 'error');
            }
        } finally {
            setButtonLoading(false);
        }
    });
});

// Helper function to get service names
function getServiceName(serviceValue) {
    const services = {
        'landing': '–õ–µ–Ω–¥–∏–Ω–≥',
        'shop': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
        'corporate': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç',
        'support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∞–π—Ç–∞',
        'other': '–î—Ä—É–≥–æ–µ'
    };
    return services[serviceValue] || serviceValue;
}

// Notification system
function showNotification(message, type = 'info') {
    // Remove existing notifications
    const existingNotification = document.querySelector('.notification');
    if (existingNotification) {
        existingNotification.remove();
    }
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</span>
            <span class="notification-text">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
    `;
    
    // Add styles if not exists
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                max-width: 400px;
                background: white;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 1000;
                animation: slideIn 0.3s ease-out;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }
            
            .notification-success {
                border-left: 4px solid #28a745;
            }
            
            .notification-error {
                border-left: 4px solid #dc3545;
            }
            
            .notification-content {
                display: flex;
                align-items: center;
                padding: 16px;
                gap: 12px;
            }
            
            .notification-close {
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                color: #666;
                margin-left: auto;
                padding: 0;
                width: 20px;
                height: 20px;
                display: flex;
                align-items: center;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes slideOut {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    // Add to page
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideOut 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// Loading state management
function setButtonLoading(loading = true) {
    const button = document.querySelector('.submit-btn');
    if (button) {
        if (loading) {
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
            button.disabled = true;
            button.style.opacity = '0.7';
        } else {
            button.innerHTML = '<i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ';
            button.disabled = false;
            button.style.opacity = '1';
        }
    }
}

// Form validation
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm');
    if (form) {
        form.querySelectorAll('[required]').forEach(field => {
            field.addEventListener('blur', function() {
                if (!this.value.trim()) {
                    this.style.borderColor = '#dc3545';
                } else {
                    this.style.borderColor = '#ddd';
                }
            });
        });
    }
});
